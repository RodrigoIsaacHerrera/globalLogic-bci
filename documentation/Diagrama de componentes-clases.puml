@startuml
class org.example.service.AuthService {
- PasswordEncoder passwordEncoder
- UsersRepository usersRepository
- PhonesRepository phonesRepository
- AuthenticationManager authManager
- JwtService jwtService
+ <<Create>> AuthService(PasswordEncoder,UsersRepository,PhonesRepository,AuthenticationManager,JwtService)
+ SignUpResponse signUp(SignUpRequest)
+ LoginResponse login(LoginRequest)
- SignUpResponse assemblerObjectSignUp(User,List<Phone>,SignUpRequest)
- LoginResponse assemblerObjectLogin(User,List<Phone>,LoginRequest)
- UserMapper userMapperMethod(User,List<Phone>)
}


enum org.example.shared.enums.RolePermissions {
+  ADMIN
+  USER
}

class org.example.service.JwtService {
~ String secret
+ String generateToken(User)
~ String getToken(Map<String,Object>,User)
+ String getUsernameFromToken(String)
+ boolean isTokenValid(String,UserDetails)
- Claims getAllClaims(String)
- Key getKey()
+ T getClaim(String,Function<Claims,T>)
- Date getExpiration(String)
- boolean isTokenExpired(String)
}


class org.example.controller.GlobalExceptionHandler {
+ ResponseEntity<ErrorResponse> handleNoHandlerFound(NoHandlerFoundException)
+ ResponseEntity<ErrorResponse> handleDuplicateKeyException(DuplicateKeyException)
+ ResponseEntity<ErrorResponse> handleGenericException(Exception)
+ ResponseEntity<ErrorResponse> handleMethodNotSupported(HttpRequestMethodNotSupportedException)
+ ResponseEntity<ErrorResponse> handleMediaTypeNotSupported(HttpMediaTypeNotSupportedException)
+ ResponseEntity<ErrorResponse> handleMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException)
+ ResponseEntity<ErrorResponse> handleAuthenticationCredentialsNotFoundException(AuthenticationCredentialsNotFoundException)
+ ResponseEntity<ErrorResponse> handleUsernameNotFoundException(UsernameNotFoundException)
+ ResponseEntity<ErrorResponse> handleExpiredJwt(ExpiredJwtException)
+ ResponseEntity<ErrorResponse> handleMalformedJwt(MalformedJwtException)
}

class org.example.controller.AuthController {
- AuthService authService
- ValidationsService validationsService
+ ResponseEntity<LoginResponse> login(LoginRequest)
+ ResponseEntity<SignUpResponse> signUp(SignUpRequest)
}


class org.example.data.mappers.PhoneMapper {
~ Long number
~ Integer citycode
~ String countrycode
}

class org.example.web.request.SignUpRequest {
~ String name
~ List<Phone> phones
}

class org.example.config.jwt.AuthFilterJWT {
- JwtService jwtService
- UserDetailsService userDetailsService
+ <<Create>> AuthFilterJWT(JwtService,UserDetailsService)
# void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)
- String getTokenRequest(HttpServletRequest)
}


interface org.example.data.repository.UsersRepository {
~ Optional<User> findByEmailContainingIgnoreCase(String)
~ boolean existsById(UUID)
}

class org.example.web.request.LoginRequest {
~ String email
~ String password
}

class org.example.web.reponse.SignUpResponse {
~ UserMapper user
~ String id
~ String created
~ String lastLogin
~ String token
~ boolean isActive
}

class org.example.ApplicationUserClient {
+ {static} void main(String[])
}

class org.example.data.entity.User {
- UUID id
- String name
- String email
- String password
+ <<Create>> User()
+ <<Create>> User(UUID,String,String,String)
+ Collection<? extends GrantedAuthority> getAuthorities()
+ String getUsername()
+ boolean isAccountNonExpired()
+ boolean isAccountNonLocked()
+ boolean isCredentialsNonExpired()
+ boolean isEnabled()
}


class org.example.data.mappers.UserMapper {
~ String id
~ String name
~ String email
~ String password
~ List<PhoneMapper> phones
}

class org.example.shared.ErrorResponse {
- LocalDateTime timestamp
- int code
- String detail
+ <<Create>> ErrorResponse(LocalDateTime,int,String)
}


class org.example.data.entity.Phone {
- Long id
- UUID userId
- Long number
- Integer citycode
- String countrycode
+ <<Create>> Phone()
+ <<Create>> Phone(UUID,Long,Integer,String)
}


class org.example.web.reponse.LoginResponse {
- String id
- String created
- String lastLogin
- String token
- boolean isActive
- String name
- String email
- String password
- List<PhoneMapper> phones
}

class org.example.config.security.SecurityConfiguration {
- AuthenticationProvider authenticationProvider
- AuthFilterJWT jwtAccessFilter
+ SecurityFilterChain securityWebFilterChain(HttpSecurity)
}


class org.example.config.security.ApplicationConfig {
- UsersRepository usersRepository
+ AuthenticationManager authenticationManager(AuthenticationConfiguration)
+ AuthenticationProvider authenticationProvider()
+ PasswordEncoder getPassEncoder()
+ UserDetailsService getUserDetService()
}


interface org.example.data.repository.PhonesRepository {
~ Optional<Phone> findByUserId(UUID)
~ List<Object> findAllByUserId(UUID)
}

class org.example.service.ValidationsService {
~ Pattern mailPattern
~ Pattern pssPattern
+ String validationParams(String,String)
}




org.example.web.request.LoginRequest <|-- org.example.web.request.SignUpRequest
org.springframework.web.filter.OncePerRequestFilter <|-- org.example.config.jwt.AuthFilterJWT
org.springframework.data.jpa.repository.JpaRepository <|-- org.example.data.repository.UsersRepository
org.springframework.security.core.userdetails.UserDetails <|.. org.example.data.entity.User
org.springframework.data.jpa.repository.JpaRepository <|-- org.example.data.repository.PhonesRepository
@enduml